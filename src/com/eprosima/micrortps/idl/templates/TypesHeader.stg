// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypesHeader;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, ".h"], description=["This header file contains the declaration of the described types in the IDL file."])$

#ifndef _$ctx.filename;format="toUpper"$_H_
#define _$ctx.filename;format="toUpper"$_H_

$if(ctx.printexception)$
#include <$ctx.product$/exceptions/UserException.h>
$endif$

#include <stdint.h>
#include <stdbool.h>
$ctx.directIncludeDependencies : {include | #include "$include$.h"}; separator="\n"$

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$_H_
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<>>
interface(ctx, parent, interface, export_list) ::= <<>>
export_list(exports) ::= <<>>
exception(ctx, parent, exception) ::= <<>>
operation(ctx, parent, operation, param_list) ::= <<>>
param_list(parameters) ::= <<>>
param(parameter) ::= <<>>
const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<
$typedefs : { typedef |typedef $typedef.typedefContentTypeCode.cTypename$ $typedef.name$;}; separator="\n"$
>>

struct_type(ctx, parent, struct, extensions) ::= <<
/*!
 * @brief This struct represents the structure $struct.cScopedname$ defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
typedef struct $struct.cScopedname$
{
    $struct.members:{$private_member_declaration(it)$}; separator="\n"$

} $struct.cScopedname$;

struct MicroBuffer;

bool $struct.cScopedname$_serialize_topic(struct MicroBuffer* writer, const $struct.cScopedname$* topic);
bool $struct.cScopedname$_deserialize_topic(struct MicroBuffer* reader, $struct.cScopedname$* topic);
uint32_t $struct.cScopedname$_size_of_topic(const $struct.cScopedname$* topic, uint32_t size);
>>

union_type(ctx, parent, union, extensions) ::= <<>>
enum_type(ctx, parent, enum) ::= <<>>

/***** Utils *****/

public_member_declaration(member) ::= <<>>

private_member_declaration(member) ::= <<
$private_declaration(typecode=member.typecode, name=member.name)$>>

public_unionmember_declaration(member) ::= <<>>

private_declaration(typecode, name) ::= <<
$if(typecode.isType_f)$
$typecode.cTypename$ $name$[$typecode.dimensions$];
$elseif(typecode.isType_e)$
$typecode.cTypename$* $name$_data;
uint32_t $name$_size;
$elseif(typecode.isType_d)$
$typecode.cTypename$ $name$[$typecode.maxsize$];
$else$
$typecode.cTypename$ $name$;
$endif$
>>

size_functions(type) ::= <<>>
serialization_functions(type) ::= <<>>
