// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypesHeader;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, ".h"], description=["This header file contains the declaration of the described types in the IDL file."])$

#ifndef _$ctx.filename;format="toUpper"$_H_
#define _$ctx.filename;format="toUpper"$_H_

$if(ctx.printexception)$
#include <$ctx.product$/exceptions/UserException.h>
$endif$

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <micrortps/client/xrce_client.h>
$ctx.directIncludeDependencies : {include | #include "$include$.h"}; separator="\n"$

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$_H_
>>

// TODO name -> module
module(ctx, parent, module, definition_list) ::= <<>>
definition_list(definitions) ::= <<>>
annotation(ctx, annotation) ::= <<>>
interface(ctx, parent, interface, export_list) ::= <<>>
export_list(exports) ::= <<>>
exception(ctx, parent, exception) ::= <<>>
operation(ctx, parent, operation, param_list) ::= <<>>
param_list(parameters) ::= <<>>
param(parameter) ::= <<>>
const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<
$typedefs : { typedef |typedef $typedef.typedefContentTypeCode.cTypename$ $typedef.name$;}; separator="\n"$
>>

struct_type(ctx, parent, struct, extensions) ::= <<
/*!
 * @brief This class represents the structure $struct.name$ defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
typedef struct $struct.name$
{
    $struct.members:{$private_member_declaration(it)$}; separator="\n"$

} $struct.name$;

static bool serialize_$struct.name$_topic(MicroBuffer* writer, const $struct.name$* topic)
{
    $struct.members : { member |$object_serialization(ctx=ctx, object=member)$}; separator=""$
    return writer->error == BUFFER_OK;
}

static bool deserialize_$struct.name$_topic(MicroBuffer* reader, $struct.name$* topic)
{
    $struct.members : { member |$object_deserialization(ctx=ctx, object=member)$}; separator=""$
    return reader->error == BUFFER_OK;
}

static uint32_t size_of_$struct.name$_topic(const $struct.name$* topic)
{
    uint32_t size = 0;

    $struct.members : { member|$serialized_size(ctx=ctx, object=member, data="topic", var="size")$};separator=""$
    return size;
}

static bool write_$struct.name$(Session* session, ObjectId datawriter_id, StreamId stream_id, $struct.name$* topic)
{
    if (session == NULL)
    {
        return false;
    }

    bool result = false;
    uint32_t topic_size = size_of_$struct.name$_topic(topic);
    MicroBuffer* topic_buffer = NULL;

    if (128 > stream_id)
    {
        topic_buffer = prepare_best_effort_stream_for_topic(&session->output_best_effort_stream, datawriter_id, topic_size);
    }
    else
    {
        topic_buffer = prepare_reliable_stream_for_topic(&session->output_reliable_stream, datawriter_id, topic_size);
    }

    if (topic_buffer != NULL)
    {
        result = serialize_$struct.name$_topic(topic_buffer, topic);
    }

    return result;
}
>>

union_type(ctx, parent, union, extensions) ::= <<>>
enum_type(ctx, parent, enum) ::= <<>>

/***** Utils *****/

public_member_declaration(member) ::= <<>>

private_member_declaration(member) ::= <<
$private_declaration(typecode=member.typecode, name=member.name)$>>

public_unionmember_declaration(member) ::= <<>>

private_declaration(typecode, name) ::= <<
$if(typecode.isType_f)$
$typecode.cTypename$ $name$[$typecode.dimensions$];
$elseif(typecode.isType_e)$
$typecode.cTypename$* $name$_data;
uint32_t $name$_size;
$else$
$typecode.cTypename$ $name$;
$endif$
>>

size_functions(type) ::= <<>>
serialization_functions(type) ::= <<>>
