// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypesSource;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, ".c"], description=["This source file contains the definition of the described types in the IDL file."])$

#include "$ctx.filename$.h"

$definitions; separator="\n"$

>>

module(ctx, parent, module, definition_list) ::= <<>>

definition_list(definitions) ::= <<>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<>>

export_list(exports) ::= <<>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct, extensions) ::= <<
bool serialize_$struct.name$_topic(MicroBuffer* writer, const $struct.name$* topic)
{
    $struct.members : { member |$object_serialization(ctx=ctx, object=member)$}; separator=""$
    return writer->error == BUFFER_OK;
}

bool deserialize_$struct.name$_topic(MicroBuffer* reader, $struct.name$* topic)
{
    $struct.members : { member |$object_deserialization(ctx=ctx, object=member)$}; separator=""$
    return reader->error == BUFFER_OK;
}

uint32_t size_of_$struct.name$_topic(const $struct.name$* topic, uint32_t size)
{
    $struct.members : { member|$serialized_size(ctx=ctx, object=member, data="topic", var="size")$};separator=""$
    return size;
}

bool write_$struct.name$(Session* session, ObjectId datawriter_id, StreamId stream_id, $struct.name$* topic)
{
    if (session == NULL)
    {
        return false;
    }

    bool result = false;
    uint32_t topic_size = size_of_$struct.name$_topic(topic, 0);
    MicroBuffer* topic_buffer = NULL;

    if (128 > stream_id)
    {
        topic_buffer = prepare_best_effort_stream_for_topic(&session->output_best_effort_stream, datawriter_id, topic_size);
    }
    else
    {
        topic_buffer = prepare_reliable_stream_for_topic(&session->output_reliable_stream, datawriter_id, topic_size);
    }

    if (topic_buffer != NULL)
    {
        result = serialize_$struct.name$_topic(topic_buffer, topic);
    }

    return result;
}
>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

/***** Utils *****/

public_unionmember_declaration(class, member, totallabels, defaultvalue) ::= <<>>

member_move(member) ::= <<>>

// TODO Mirar si el default: esta delante de otros casos, el resto no se ejecuta.
unionmember_discriminator_case(member, totallabels) ::= <<>>

unionmember_copy(member) ::= <<>>

unionmemberdefault_copy(member) ::= <<>>

unionmember_move(member) ::= <<>>

unionmemberdefault_move(member) ::= <<>>

unionmember_set_discriminator(member, defaultvalue) ::= <<>>

unionmember_check_case_list(member, totallabels) ::= <<>>

unionmember_case_selection_se(ctx, member) ::= <<>>

unionmemberdefault_case_selection_se(ctx, member) ::= <<>>

unionmember_case_selection_de(ctx, member) ::= <<>>

unionmemberdefault_case_selection_de(ctx, member) ::= <<>>

unionmember_case_selection_sesize(ctx, member, data, var) ::= <<>>

unionmemberdefault_case_selection_sesize(ctx, member, data, var) ::= <<>>
